head(activity[activity$interval == 2315,])
five_m_int <- activity %>%
group_by(interval) %>%
do (
mutate(., sum=sum(steps, na.rm = T)
, mean=mean(steps, na.rm = T)
, median=median(steps, na.rm = T)
)
) %>%
distinct(interval)
five_m_int
five_m_int <- activity %>%
group_by(interval) %>%
mutate( mean=mean(steps, na.rm = T)) %>%
distinct(interval)
five_m_int
plot(data = five_m_int, x=interval, y=mean)
with(five_m_int, plot(interval, mean))
with(five_m_int, plot(interval, mean, type = "l"))
with(five_m_int,
plot(interval, mean, type = "l"
, main="Number of steps per 5-minute interval"
, xlab="Intervals"
, ylab="Average number of steps"
)
)
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
five_m_int <- activity %>%
group_by(interval) %>%
mutate( mean=mean(steps, na.rm = T)) %>%
distinct(interval)
with(five_m_int,
plot(interval, mean, type = "l"
, main="Number of steps per 5-minute interval"
, xlab="Intervals"
, ylab="Average number of steps"
)
)
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
five_m_int <- activity %>%
group_by(interval) %>%
mutate( mean=mean(steps, na.rm = T)) %>%
distinct(interval)
with(five_m_int,
plot(interval, mean, type = "l"
, main="Steps per 5-minute interval"
, xlab="Intervals"
, ylab="Average number of steps"
)
)
head(five_m_int)
five_m_int[five_m_int$interval == 500, ]
five_m_int[five_m_int$interval == 700, ]
max(five_m_int$mean)
mxmean <- max(five_m_int$mean)
five_m_int[ mean == mxmean, c("interval", "mean")]
mxmean
five_m_int[ mean == mxmean, ]
five_m_int[ five_m_int$mean == mxmean, c("interval", "mean")]
head(activity)
lenght(complete(activity$steps))
length(complete(activity$steps))
length(complete.cases(activity$steps))
dim(activity)
unique(activity$steps)
table(activity$steps)
class(activity$steps)
is.na(activity$steps)
sum(is.na(activity$steps))
head(activity)
sum(is.na(activity$date))
sum(is.na(activity$interval))
ncol <- dim(activity)[2]
ncol
activity$steps
head(activity$steps)
head(activity[,1])
head(activity$date)
head(activity[,2])
ncol <- dim(activity)[2]
res <- 0
for (i=1 : ncol){
res <- res + sum(is.na(activity[, i]))
}
res
ncol <- dim(activity)[2]
res <- 0
for (i in 1:ncol){
res <- res + sum(is.na(activity[, i]))
}
res
comp <- complete.cases(activity)
comp
sum(comp)
dim(activity)
n_complete <- sum(complete.cases(activity))
n_total <- dim(activity)[1]
n_total - n_complete
five_m_int
sum(is.na(five_m_int$mean))
sum(is.na(steps_per_day$mean))
head(five_m_int, 30)
head(activity)
five_m_int[five_m_int$interval == 5, ]
activity[activity$interval == 5, ]
mean(activity[activity$interval == 5, ]$steps, na.rm=T)
five_m_int
imputation_values <- five_m_int  %>% select(interval, mean)
imputation_values
activity
activity_new <- left_join(
activity
, imputation_values
, by="interval"
, copy=T
)
head(activity_new)
activity_new[activity_new$interval == 200, ]
activity_new[activity_new$interval == 38, ]
activity_new[activity_new$interval == 50, ]
imputation_values[imputation_values$interval == 50, ]
activity_new
head(activity_new, 30)
df <- mutate(activity_new, if (is.na(steps)){steps = mean})
index <- which(is.na(activity_new$steps))
index
index <- which(is.na(activity_new$steps))
df <- activity_new %>%
mutate(steps[index]=mean[index])
index <- which(is.na(activity_new$steps))
nmax <- length(index)
nmax
index_i <- index[34]
index_i
index
index_i <- index[405]
index
index_i
index <- which(is.na(activity_new$steps))
nmax <- length(index)
for (i in 1:nmax){
index_i <- index[i]
activity_new$steps[index_i] <- activity_new$mean[index_i]
}
head(activity_new)
head(activity_new,400)
index
head(activity_new,400)
activity_new <- activity_new %>% select(steps, date, interval)
head(activity_new,400)
head(activity_new,400)
imputation_values <- five_m_int  %>% select(interval, mean)
activity_new <- left_join(
activity
, imputation_values
, by="interval"
, copy=T
)
index <- which(is.na(activity_new$steps))
nmax <- length(index)
for (i in 1:nmax){
index_i <- index[i]
activity_new$steps[index_i] <- activity_new$mean[index_i]
}
index <- which(is.na(activity_new$steps))
nmax <- length(index)
for (i in 1:nmax){
index_i <- index[i]
activity_new$steps[index_i] <- activity_new$mean[index_i]
}
## Create a new dataset that is equal to the original dataset but with the missing data filled in.
imputation_values <- five_m_int  %>% select(interval, mean)
activity_new <- left_join(
activity
, imputation_values
, by="interval"
, copy=T
)
index <- which(is.na(activity_new$steps))
nmax <- length(index)
for (i in 1:nmax){
index_i <- index[i]
activity_new$steps[index_i] <- activity_new$mean[index_i]
}
activity_new <- activity_new %>% select(steps, date, interval)
activity_new
steps_per_day2 <- activity_new %>%
group_by(date) %>%
do (
mutate(., sum=sum(steps, na.rm = T)
, mean=mean(steps, na.rm = T)
, median=median(steps, na.rm = T)
)
) %>%
distinct(date)
steps_per_day2
total_days2 <- as.numeric(max(steps_per_day2$date) - min(steps_per_day2$date) + 1)
hist(steps_per_day2$sum
, main = paste("Total number of steps per day","\n(",total_days2,"-day period)")
, xlab="Steps per day"
, ylab="Frequency of days"
)
## calculate and report the mean and median of the total number of steps taken per day
steps_per_day2 %>% select(date, mean, median)
steps_per_day
steps_per_day2
weekday(steps_per_day2$date)
weekdays(steps_per_day2$date)
head(steps_per_day2$date)
head(steps_per_day2$date,300)
steps_per_day2
weekdays(activity_new$date)
is.weekdays(activity_new$date)
activity_new <- activity_new %>%
mutate(day_type=weekdays(date, abbr=T))
heady(activity_new)
head(activity_new)
weekdays()
wday(steps_per_day2$date)
wday(steps_per_day2$date, label=T)
activity_new <- activity_new %>%
mutate(day_type=(wday(date))
)
activity_new <- activity_new %>%
mutate(day_type=(wday(date)))
activity_new
head(activity_new, 300)
class(activity_new$day_type)
activity_new$day_type[activity_new$day_type == 1 || activity_new$day_type == 7] = "weekend"
head(activity_new, 300)
unique(activity_new$day_type)
###############################################################################
###     set programming environment
###############################################################################
## clean up
rm(list=ls())
## load libraries
library(lubridate)
library(dplyr)
#library(tidyr)
###############################################################################
###     Loading and preprocessing the data
###############################################################################
## read entire dataset
activity_raw <- read.csv("activity.csv")
## convert strings to lubridates
activity <- activity_raw %>% mutate(date=ymd(date))
###############################################################################
###     What is mean total number of steps taken per day?
###############################################################################
## calculate the total number of steps taken per day
steps_per_day <- activity %>%
group_by(date) %>%
do (
mutate(., sum=sum(steps, na.rm = T)
, mean=mean(steps, na.rm = T)
, median=median(steps, na.rm = T)
)
) %>%
distinct(date)
steps_per_day %>% select(date, sum)
## make a histogram of the total number of steps taken each day
total_days <- as.numeric(max(steps_per_day$date) - min(steps_per_day$date) + 1)
hist(steps_per_day$sum
, main = paste("Total number of steps per day","\n(",total_days,"-day period)")
, xlab="Steps per day"
, ylab="Frequency of days"
)
## calculate and report the mean and median of the total number of steps taken per day
steps_per_day %>% select(date, mean, median)
###############################################################################
###     What is the average daily activity pattern?
###############################################################################
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
five_m_int <- activity %>%
group_by(interval) %>%
mutate( mean=mean(steps, na.rm = T)) %>%
distinct(interval)
with(five_m_int,
plot(interval, mean, type = "l"
, main="Steps per 5-minute interval"
, xlab="Intervals"
, ylab="Average number of steps"
)
)
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
mxmean <- max(five_m_int$mean)
five_m_int[ five_m_int$mean == mxmean, c("interval", "mean")]
###############################################################################
###     Imputing missing values
###############################################################################
## Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
n_complete <- sum(complete.cases(activity))
n_total <- dim(activity)[1]
n_total - n_complete
## Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
## Create a new dataset that is equal to the original dataset but with the missing data filled in.
imputation_values <- five_m_int  %>% select(interval, mean)
activity_new <- left_join(
activity
, imputation_values
, by="interval"
, copy=T
)
index <- which(is.na(activity_new$steps))
nmax <- length(index)
for (i in 1:nmax){
index_i <- index[i]
activity_new$steps[index_i] <- activity_new$mean[index_i]
}
activity_new <- activity_new %>% select(steps, date, interval)
## Make a histogram of the total number of steps taken each day
### calculate the total number of steps taken per day
steps_per_day2 <- activity_new %>%
group_by(date) %>%
do (
mutate(., sum=sum(steps, na.rm = T)
, mean=mean(steps, na.rm = T)
, median=median(steps, na.rm = T)
)
) %>%
distinct(date)
### make a histogram of the total number of steps taken each day
total_days2 <- as.numeric(max(steps_per_day2$date) - min(steps_per_day2$date) + 1)
hist(steps_per_day2$sum
, main = paste("Total number of steps per day","\n(",total_days2,"-day period)")
, xlab="Steps per day"
, ylab="Frequency of days"
)
## calculate and report the mean and median of the total number of steps taken per day
steps_per_day2 %>% select(date, mean, median)
head(activity_new)
activity_new <- mutate(activity_new
, if (wday(date) == 1){day_type="weekend"}
else if (wday(date) == 7){day_type="weekend"}
else {day_type="weekday"})
nrows <- dim(activity_new)[1]
nrows
wday(activity_new[1, date])
activity_new[1, date]
activity_new[1, "date"]
wday(activity_new[1, "date"])
wday(activity_new[166, "date"])
wday(activity_new[1666, "date"])
nrows <- dim(activity_new)[1]
day_type <- NULL
for (i in 1:nrows){
date_i <- wday(activity_new[i, "date"])
if (date_i == 1) {
day_type <- c(day_type,"weekend")
}
else if (date_i == 7) {
day_type <- c(day_type,"weekend")
}
else {
day_type <- c(day_type,"weekday")
}
}
unique(day_type)
activity_new <- data.frame(activity_new,day_type)
head(activity_new)
dim(activity_new)
names(activity_new)
day_type
dim(day_type)
head(day_type)
###############################################################################
###     set programming environment
###############################################################################
## clean up
rm(list=ls())
## load libraries
library(lubridate)
library(dplyr)
#library(tidyr)
###############################################################################
###     Loading and preprocessing the data
###############################################################################
## read entire dataset
activity_raw <- read.csv("activity.csv")
## convert strings to lubridates
activity <- activity_raw %>% mutate(date=ymd(date))
###############################################################################
###     What is mean total number of steps taken per day?
###############################################################################
## calculate the total number of steps taken per day
steps_per_day <- activity %>%
group_by(date) %>%
do (
mutate(., sum=sum(steps, na.rm = T)
, mean=mean(steps, na.rm = T)
, median=median(steps, na.rm = T)
)
) %>%
distinct(date)
steps_per_day %>% select(date, sum)
## make a histogram of the total number of steps taken each day
total_days <- as.numeric(max(steps_per_day$date) - min(steps_per_day$date) + 1)
hist(steps_per_day$sum
, main = paste("Total number of steps per day","\n(",total_days,"-day period)")
, xlab="Steps per day"
, ylab="Frequency of days"
)
## calculate and report the mean and median of the total number of steps taken per day
steps_per_day %>% select(date, mean, median)
###############################################################################
###     What is the average daily activity pattern?
###############################################################################
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
five_m_int <- activity %>%
group_by(interval) %>%
mutate( mean=mean(steps, na.rm = T)) %>%
distinct(interval)
with(five_m_int,
plot(interval, mean, type = "l"
, main="Steps per 5-minute interval"
, xlab="Intervals"
, ylab="Average number of steps"
)
)
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
mxmean <- max(five_m_int$mean)
five_m_int[ five_m_int$mean == mxmean, c("interval", "mean")]
###############################################################################
###     Imputing missing values
###############################################################################
## Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
n_complete <- sum(complete.cases(activity))
n_total <- dim(activity)[1]
n_total - n_complete
## Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
## Create a new dataset that is equal to the original dataset but with the missing data filled in.
imputation_values <- five_m_int  %>% select(interval, mean)
activity_new <- left_join(
activity
, imputation_values
, by="interval"
, copy=T
)
index <- which(is.na(activity_new$steps))
nmax <- length(index)
for (i in 1:nmax){
index_i <- index[i]
activity_new$steps[index_i] <- activity_new$mean[index_i]
}
activity_new <- activity_new %>% select(steps, date, interval)
## Make a histogram of the total number of steps taken each day
### calculate the total number of steps taken per day
steps_per_day2 <- activity_new %>%
group_by(date) %>%
do (
mutate(., sum=sum(steps, na.rm = T)
, mean=mean(steps, na.rm = T)
, median=median(steps, na.rm = T)
)
) %>%
distinct(date)
### make a histogram of the total number of steps taken each day
total_days2 <- as.numeric(max(steps_per_day2$date) - min(steps_per_day2$date) + 1)
hist(steps_per_day2$sum
, main = paste("Total number of steps per day","\n(",total_days2,"-day period)")
, xlab="Steps per day"
, ylab="Frequency of days"
)
## calculate and report the mean and median of the total number of steps taken per day
steps_per_day2 %>% select(date, mean, median)
###############################################################################
###     Are there differences in activity patterns between weekdays and weekends?
###############################################################################
## Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
nrows <- dim(activity_new)[1]
day_type <- NULL
for (i in 1:nrows){
date_i <- wday(activity_new[i, "date"])
if (date_i == 1) {
day_type <- c(day_type,"weekend")
}
else if (date_i == 7) {
day_type <- c(day_type,"weekend")
}
else {
day_type <- c(day_type,"weekday")
}
}
activity_new <- data.frame(activity_new,day_type)
head(activity_new)
class(activity_new$day_type)
five_m_int3 <- activity_new %>%
group_by(interval, day_type) %>%
mutate( mean=mean(steps, na.rm = T)) %>%
distinct(interval, day_type)
five_m_int3
ls()
five_m_int2 <- activity_new %>%
group_by(interval, day_type) %>%
mutate( mean=mean(steps, na.rm = T)) %>%
distinct(interval, day_type)
par(mfrow=c(1,2))
with(five_m_int2[five_m_int2$day_type=="weekend", ],
plot(interval, mean, type = "l"
, main=paste("Steps per 5-minute interval","\n(weekend)")
, xlab="Intervals"
, ylab="Average number of steps"
)
)
with(five_m_int2[five_m_int2$day_type=="weekday", ],
plot(interval, mean, type = "l"
, main=paste("Steps per 5-minute interval","\n(weekday)")
, xlab="Intervals"
, ylab="Average number of steps"
)
)
